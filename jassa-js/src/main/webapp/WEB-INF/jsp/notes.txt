Join strageties:

We can distingish between:

- fetching by combining multiple queries into a single one
	- immediate



- separate fetching with multiple queries
	- eager: the system resolves all relations before returning a result set
	- lazy: 

http://www.mkyong.com/hibernate/hibernate-fetching-strategies-examples/




Criterias that span document boundaries





Below should be done.


- We are using the terms pattern and template to refer to the same thing
  The question is, whether a template should aggregate a pattern, and have some meta data about it
  E.g. the mentioned variables
  Resolution: There is only the Pattern object now.



This has to become some plugin code:

				var deferred = $q.defer();
				
				var jQueryPromise = store.castles.forAngular();all();
				jQueryPromise.success(function(data) {
					deferred.resolve(data)
				}).fail(functino() {
					deferred.fail();
				});
				
				return deferred;

Also check this for safeApply: 
	http://stackoverflow.com/questions/17823765/angularjs-promise-doesnt-retrieve-a-deeply-wrapped-jquery-post-call

			// 	service.execSelect('Select * { ?s a ?t } Limit 10').done(function(it) {
// 		while(it.hasNext()) {
// 			console.log('' + it.next());
// 		}
// 	});
				
				
				
				
				
					// TODO What if we have a criteria that extends over a document boundary?
	// We could have a flag that indicates whether to extend it, or to only apply
	// client side filtering { ref: someDoc, fetchType: 'lazy', extendCritera: true} -> Even if it is lazy, we make an exception on criteria extends
	throw 'die';

	
	/* NOTE: In order to re-use faceted search on the sparql level we could 
	replace the from clause with an elementProvider.
	
	The faceted search would yield different elements that still must adhere to the schema
	
	Hm, no, this is not really a good solution.
	
	- A document that depends on a parent document
	
	store.addMap({
		name: 'castleConcept',
		template: [{id: ?s}],
		from: '?s a Castle'
	});
	
	store.addMap({name: 'castle', childOf: 'castleConcept', childColumn: 'x', from: '?x ....'})
	
	Hm, my gut feeling tells me that doing this parent-child relationship should not be done on the doc 
	level, but on the table level.
	
	I.e. on table is declared to depend on another...
	Yes, this would work out:

	schema.createTable('parent').setImpl('?s a Castle');
	schema.createTable('child').setImpl(?x owner ?o);
	
	schema.createView('parent_child', 'parent join child') // TODO what syntax to use for the join?
	
	
	*/