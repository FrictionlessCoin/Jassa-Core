	var prefLabelPropertyUris = [
//    		'http://www.w3.org/2004/02/skos/core#prefLabel',
//    	    'http://purl.org/dc/elements/1.1/title',
//    	    'http://purl.org/dc/terms/title',

//    	    'http://swrc.ontoware.org/ontology#title',
//    	    'http://xmlns.com/foaf/0.1/name',
//    	    'http://usefulinc.com/ns/doap#name',
//    	    'http://rdfs.org/sioc/ns#name',
//    	    'http://www.holygoat.co.uk/owl/redwood/0.1/tags/name',
//    	    'http://linkedgeodata.org/vocabulary#name',
//    	    'http://www.geonames.org/ontology#name',
//    	    'http://www.geneontology.org/dtds/go.dtd#name',

   	    'http://www.w3.org/2000/01/rdf-schema#label',

//    	    'http://xmlns.com/foaf/0.1/accountName',
//    	    'http://xmlns.com/foaf/0.1/nick',
//    	    'http://xmlns.com/foaf/0.1/surname',
   	    
    	    'http://www.w3.org/2004/02/skos/core#altLabel',
    	    'http://geoknow.eu/geodata#name'
	];

	
	
		//var sparqlEndpointUrl = 'http://localhost/sparql';
	//var sparqlEndpointUrl = 'http://cstadler.aksw.org/vos-freebase/sparql';	
	
// 	var sparqlEndpointUrl = 'http://dbpedia.org/sparql';
// 	var defaultGraphIris = ['http://dbpedia.org'];

// 	var sparqlEndpointUrl = 'http://fp7-pp.publicdata.eu/sparql';
// 	var defaultGraphIris = ['http://fp7-pp.publicdata.eu/'];
	
	var sparqlServiceIri = 'http://localhost/fts-sparql';
// 	var defaultGraphIris = ['http://fts.publicdata.eu/'];
	//var defaultGraphIris = ['http://fp7-pp.publicdata.eu/'];
	//var defaultGraphIris = ['http://wikimapia.org/hotels/athens/'];
	//var defaultGraphIris = ['http://wikimapia.org/hotels/athens/'];

	
// 	var sparqlEndpointUrl = 'http://localhost:8080/sparqlify/services/lgd/sparql';
 	var defaultGraphIris = [];

 	
// 	var sparqlEndpointUrl = 'http://cstadler.aksw.org/conti/freebase/germany/sparql';
// 	var defaultGraphIris = ['http://freebase.com/2013-09-22/data/'];

//  	var sparqlEndpointUrl = 'http://cstadler.aksw.org/conti/freebase/world/sparql';
//  	var defaultGraphIris = ['http://freebase.com/2013-09-22/all'];

//  	var sparqlEndpointUrl = 'http://linkedgeodata.org/sparql';
//  	var defaultGraphIris = ['http://linkedgeodata.org'];


// 	var sparqlEndpointUrl = 'http://cstadler.aksw.org/conti/freebase/germany/sparql';
// 	var defaultGraphIris = ['http://freebase.com/2013-09-22/data/'];

	var labelStore = store.labels;
	
	var concept = new facete.Concept(sparql.ElementString.create('?s a <http://purl.org/acco/ns#Hotel>'), rdf.NodeFactory.createVar('s'));
	labelStore.find().concept(concept).skip(10).limit(10).asList(true).done(function(docs) {
	   console.log('doc', docs); 
	});
	
	//var conceptGeoFreebaseVocab = new facete.Concept(sparql.ElementString.create('?s <http://rdf.freebase.com/ns/location.location.geolocation..location.geocode.longitude> ?x ;  <http://rdf.freebase.com/ns/location.location.geolocation..location.geocode.latitude> ?y'), rdf.NodeFactory.createVar('s'));
	//var conceptWgs84 = conceptGeoFreebaseVocab;
	//conceptWgs84 = conceptGeoVocab;




    
    var wkt = "POLYGON((1 2 3 4 5 6 7 8))";
    wkt = 'GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))';
    var points = geo.WktUtils.extractPointsFromWkt(wkt);
    console.log('points: ' + JSON.stringify(points));

    var bbox = geo.WktUtils.createBBoxFromPoints(points);
    console.log('bbox: ' + bbox);




	var bounds = {left: 0, bottom: 0, right: 10, top: 10};
	
	var wgs84Map = wgs84MapFactory.createMapForBounds(bounds);
	
	store.addMap(wgs84Map, 'wgs84');
	store.wgs84.find().limit(10).asList().done(function(docs) {
	   console.log('docs: ', docs); 
	});
	
	
	//var qtc = new geo.QuadTreeCache(qef, wgs84MapFactory);
	var qtc = new geo.QuadTreeCache(qef, ogcMapFactory);

	var b = new geo.Bounds.createFromJson(bounds);
	var promise = qtc.fetchData(b);
	promise.done(function(data) {
	    console.log('yay:', data);
	}).fail(function(data) {
	   console.log('nay:', data); 
	});

	/*
	var flow = sponateBuilder.create(startMap).
	
	*/
	
	
	
	
	/* 
	var pathToElement = function(path) {

	    var concept = fctService.createConceptFacetValues(path);			
		
		var baseConcept = configModel.get('concept');				
		var tmpConcept = hack.createConcept();

		
		var concept = baseConcept.combineWith(tmpConcept);

		var pathConstraintFactory = new facets.PathConstraintWgs84.Factory.create(geoPath);
		var geoConceptFactoryBase = new facets.GeoConceptFactory(rootFacetNode, pathConstraintFactory);
		
		
		var geoConceptFactory = new facets.GeoConceptFactoryCombine(concept, geoConceptFactoryBase);
			    
	};
	*/
	
// 	store.labels.find({hiddenLabels: {$elemMatch: {id: {$regex: 'mask'}}}}).limit(10).asList().done(function(items) {
	    
// 	});
	

	
	/*
	 * Is the following distinction into 3 concepts sufficient?
	 * Execute a spec on a service
	 * Executor.execute(spec, service)
	 */
	
	
	
	

// 	/**
// 	 * Facete
// 	 */
// 	var constraintManager = new facete.ConstraintManager();
	
// 	var baseVar = rdf.NodeFactory.createVar("s");
// 	var baseConcept = facete.ConceptUtils.createSubjectConcept(baseVar);
// 	//var sparqlStr = sparql.SparqlString.create("?s a ?t");
// 	//var baseConcept = new facete.Concept(new sparql.ElementString(sparqlStr));
// 	var rootFacetNode = facete.FacetNode.createRoot(baseVar);
	
// 	// Based on above objects, create a provider for the configuration
// 	// which the facet service can build upon
// 	var facetConfigProvider = new facete.FacetGeneratorConfigProviderIndirect(
// 		new facete.ConceptFactoryConst(baseConcept),
// 		new facete.FacetNodeFactoryConst(rootFacetNode),
// 		constraintManager
// 	);
	
// 	var fcgf = new facete.FacetConceptGeneratorFactoryImpl(facetConfigProvider);
// 	var facetConceptGenerator = fcgf.createFacetConceptGenerator();


// 	// The FacetStateProvider keeps track of limit and offsets for the nodes of the facet tree
// 	// By default, a limit of 10 is used
// 	var facetStateProvider = new facete.FacetStateProviderImpl(10);

// 	// A map from path to search string
// 	var pathToFilterString = new util.HashMap();
	
// 	var expansionSet = new util.HashSet();
// 	expansionSet.add(new facete.Path());
	
// 	//facetStateProvider.getMap().put(new facete.Path(), new facete.FacetStateImpl(true, null, null))
	
// 	var fctService = new facete.FacetServiceImpl(qef, facetConceptGenerator, labelStore);

	

// 	var fctTreeService = new facete.FacetTreeServiceImpl(fctService, expansionSet, facetStateProvider, pathToFilterString);


//     var constraintTaggerFactory = new facete.ConstraintTaggerFactory(constraintManager);


//     var faceteConceptFactory = new ns.ConceptFactoryFacetService(fctService);
// 	var FaceteConceptFactory = Class.create(facete.ConceptFactory, {
// 	    initialize: function(facetService) {
// 	        this.facetService = facetService;
// 	    },
	    
// 	    createConcept: function() {
// 		    var result = this.facetService.createConceptFacetValues(new facete.Path());
// 		    return result;
// 	    }
// 	});
	
    //var viewStateFetcher = new geo.ViewStateFetcher(qef, ogcMapFactory, faceteConceptFactory);


            /*            
        	var promise = qtc.fetchData(bounds);
        	promise.done(function(nodes) {
                $scope.map.widget.clearItems();
        	    console.log('nodes', nodes);

        	    _(nodes).each(function(node) {
        	        
        	        if(!node.isLoaded) {
        	            console.log('box: ' + node.getBounds());
        	            $scope.map.widget.addBox('' + node.getBounds(), node.getBounds());
        	        }
        	        
        	        var data = node.data || {};
            	    var docs = data.docs || [];

            	    _(docs).each(function(doc) {
 
            	        $scope.map.widget.addWkt(doc.id, doc.wkt);
            	        
            	        //var wktParser = new OpenLayers.Format.WKT();
                 	    //var polygonFeature = wktParser.read(wkt);
            	        //console.log('wkt: ', polygonFeature);
                 	    //polygonFeature.geometry.transform(map.displayProjection, map.getProjectionObject());         
            	    });        	        
        	    });
        	    
//         	    vectors.addFeatures([polygonFeature]);
        	});
*/          

// 	var qef = new service.SparqlServiceHttp(sparqlServiceIri, defaultGraphIris);
// 	qef = new service.SparqlServiceCache(qef);



	    
	    
// 	    //$scope.activeWorkSpace = null;
	    
// 	    $scope.$watch('activeWorkSpaceService.getWorkSpace()', function(workSpace) {
// 	        $scope.activeWorkSpace = workSpace;
// 	    });
	    
// // 	    $scope.$on('facete:workSpaceSelected', function(ev, workSpace) {
// // 	        if(workSpace) {
// // 		        if(!workSpace.conceptSpaces) {
// // 		            workSpace.conceptSpaces = [];
// // 		        }
// // 	        }
// // 	        $scope.activeWorkSpace = workSpace;
// // 		});
	    
	    
// 	    $scope.addConceptSpace = function() {
// 	        var conceptSpaces = $scope.activeWorkSpace.conceptSpaces;

// 	        var id = 'conceptSpace' + (conceptSpaces.length + 1);
	        
// 	        var conceptSpace = {
// 	            id: id,
// 	            name: id,
// 	            // Facet tree stuff, (Does GeoLink stuff go here, or is it external?)
// 	            // Maybe rename concept to conceptSpace
// 	        };
	        
// 	        conceptSpaces.push(conceptSpace);
// 	    };
	    
// 	    $scope.removeConceptSpace = function(index) {
// 	        var conceptSpaces = $scope.activeWorkSpace.conceptSpaces;
// 	        var conceptSpace = conceptSpaces[index];

// 	        if(conceptSpace.isActive) {
// 	            $scope.selectConceptSpace(null);
// 	        }

// 	        conceptSpaces.splice(index, 1);
// 	    };
	    
// 	    $scope.selectConceptSpace = function(index) {
// 	        var conceptSpaces = $scope.activeWorkSpace.conceptSpaces;
// 	        var conceptSpace = null;

// 	        if(index != null) {
// 	        	conceptSpace = conceptSpaces[index];
// 	        	conceptSpace.isActive = true;
// 	        }

// 	        $scope.$emit('facete:conceptSelected', conceptSpace);
// 	    }
	    
// 	    $scope.$on('facete:conceptSelected', function(ev, conceptSpace) {
// 	        var conceptSpaces = $scope.activeWorkSpace.conceptSpaces;
	        
// 	        if(conceptSpace) {
// 		        _(conceptSpaces).each(function(c) {
// 		            if(c.id != conceptSpace.id) {
// 		                c.isActive = false;
// 		            }
// 		        });
// 	        }
// 		});


// 	myModule.controller('Foobar', function($scope, $compile) {
//         $scope.alert = function() { alert('hi'); };
	    
// // 	    $k = $rootScope.$new();
	    
// //         $k.total = 1000;
        
// //         var xxx = $compile('<div ng-controller="Foobar"><p ng-click="alert()">{{total}}</p></div>')($k);
// //         console.log('Hooray', xxx);
// //         jQuery('#foobar2').replaceWith(xxx);
// //         return {};
// 	});



	var ConceptSpaceFactory = Class.create({
	    
	    initialize: function() {
	        
	    },
	    
	    	
	    createConceptSpace: function() {




	    	// The FacetStateProvider keeps track of limit and offsets for the nodes of the facet tree
	    	// By default, a limit of 10 is used
	    	var facetStateProvider = new facete.FacetStateProviderImpl(10);

	    	// A map from path to search string
	    	var pathToFilterString = new util.HashMap();
	    	
	    	var expansionSet = new util.HashSet();
	    	expansionSet.add(new facete.Path());
	    	
	    	//facetStateProvider.getMap().put(new facete.Path(), new facete.FacetStateImpl(true, null, null))
	    	
	    	//var facetService = new facete.FacetServiceImpl(qef, facetConceptGenerator, labelStore);
			var facetService = new facete.FacetServiceImpl(facetConceptGenerator, labelMap);
	    	

	    	var facetTreeService = new facete.FacetTreeServiceImpl(facetService, expansionSet, facetStateProvider, pathToFilterString);


	        var constraintTaggerFactory = new facete.ConstraintTaggerFactory(constraintManager);	   
	        
	        
	        var faceteConceptFactory = new ns.ConceptFactoryFacetService(fctService);
	        
	        
	        var result = new ns.ConceptSpace(facetTreeService);
	        
	        return result;
	    }
	    
	    
	});

	
